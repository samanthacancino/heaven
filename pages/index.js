import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import {
  ApolloClient,
  createHttpLink,
  InMemoryCache,
  gql,
} from '@apollo/client';
import { setContext } from '@apollo/client/link/context';

export default function Home({ pinnedItems }) {
  console.log('pinnedItems', pinnedItems);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Some repositories by{' '}
          <a href='https://github.com/samanthacancino/'>samanthacancino</a>
        </h1>

        <div className={styles.grid}>
          {pinnedItems.map((item) => {
            return (
              <a key={item.id} href={item.url} className={styles.card}>
                <h2>{item.name}</h2>
              </a>
            );
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
          target='_blank'
          rel='noopener noreferrer'
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src='/vercel.svg' alt='Vercel Logo' width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
}

export async function getStaticProps() {
  
  const httpLink = createHttpLink({
    uri: 'https://api.github.com/graphql',
  });

  const authLink = setContext((_, { headers }) => {
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.GITHUB_ACCESS_TOKEN}`,
      },
    };
  });

  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      {
        user(login: "samanthacancino") {
          id
          pinnedItems(first: 4) {
            totalCount
            edges {
              node {
                ... on Repository {
                  id
                  name
                  url
                }
              }
            }
          }
        }
      }
    `,
  });

const { user } = data;
const pinnedItems = user.pinnedItems.edges.map((edge) => edge.node);
  return {
    props: {
      pinnedItems

    }
  }
}
